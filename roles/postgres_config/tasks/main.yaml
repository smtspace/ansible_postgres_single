---
    - name: "Create PGDATA directory"
      file:
        path: "{{ pg_data_dir }}"
        state: directory
        owner: "{{ pg_user }}"
        group: "{{ pg_user }}"
        mode: 0700

    - name: "Edit .bash_profile of postgres user"
      ansible.builtin.template: 
        src: templates/.bash_profile.j2
        dest: /var/lib/pgsql/.bash_profile
        owner: "{{ pg_user }}"
        group: "{{ pg_user }}"
        mode: 0700
    
    - name: "Initialize PostgreSQL Cluster"
      command: "/usr/pgsql-{{ postgresql_version }}/bin/initdb -D {{ pg_data_dir }}"
      become_user: "{{ pg_user }}"
      args:
        creates: "{{ pg_data_dir }}/pg_hba.conf"
    
    - name: "Create postgresql service directory"
      file:
        path: "/etc/systemd/system/postgresql-{{ postgresql_version }}.service.d"
        state: directory
        owner: root
        group: root
        mode: 0755
    
    - name: "Create postgresql-{{ postgresql_version }} service"
      ansible.builtin.template: 
        src: templates/postgresql_service.j2
        dest: /etc/systemd/system/postgresql-{{ postgresql_version }}.service.d/override.conf
        owner: root
        group: root
        mode: 0644
  
    - name: "Start PostgreSQL service"
      ansible.builtin.systemd: 
        name: postgresql-{{ postgresql_version }}.service
        daemon_reload: yes
        state: started
        enabled: true

    - name: "Ensure PostgreSQL is listening on all interfaces"
      lineinfile:
        dest={{ pg_data_dir }}/postgresql.conf
        regexp='^#?listen_addresses\s*='
        line="listen_addresses = '*'"
        state=present
      notify: Restart PostgreSQL

    - name: Flush handlers
      meta: flush_handlers

    - name: "Set postgres user's password"
      become_user: "{{ pg_user }}"
      postgresql_user:
        db: postgres
        name: postgres
        password: "{{ pg_admin_password }}"

    - name: "Allow remote connection to PostgreSQL"
      blockinfile:
        dest: "{{ pg_data_dir }}/pg_hba.conf"
        block: |
          host    all             all             0.0.0.0/0                md5
          host    all             all             ::/0                     md5
      notify: Reload PostgreSQL Config

    - name: "Create arch directory in $PGDATA"
      file:
        path: "{{ pg_data_dir }}/arch"
        state: directory
        owner: "{{ pg_user }}"
        group: "{{ pg_user }}"
        mode: 0700

    - name: "Backup postgresql.conf file"
      copy:
        src: "{{ pg_data_dir }}/postgresql.conf"
        dest: "{{ pg_data_dir }}/backup.postgresql.conf"
        remote_src: yes

    - name: "Overwrite postgresql.conf file with predefined values"
      ansible.builtin.template:
        src: templates/postgresql.conf.j2
        dest: "{{ pg_data_dir }}/postgresql.conf"
        owner: "{{ pg_user }}"
        group: "{{ pg_user }}"
        mode: 0700

    - name: "Enable archive mode"
      postgresql_set:
          name: archive_mode
          value: 'on'
      notify: "Restart PostgreSQL"

    - name: "Create extensions"
      postgresql_ext:
        name: "{{ item.name }}"
        db: "postgres"
      loop: "{{ postgres_extentions | list }}" 